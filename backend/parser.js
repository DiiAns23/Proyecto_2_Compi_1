/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,13],$V2=[1,14],$V3=[1,28],$V4=[1,20],$V5=[1,19],$V6=[1,26],$V7=[1,21],$V8=[1,25],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,27],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,33],$Vh=[1,32],$Vi=[1,36],$Vj=[2,5,7,19,20,24,26,33,34,38,49,51,53,55,56,57,58,60,63,64,65,66,67],$Vk=[1,48],$Vl=[1,47],$Vm=[1,54],$Vn=[1,50],$Vo=[1,52],$Vp=[1,53],$Vq=[1,56],$Vr=[1,57],$Vs=[1,62],$Vt=[1,63],$Vu=[1,83],$Vv=[1,78],$Vw=[1,75],$Vx=[1,74],$Vy=[1,76],$Vz=[1,77],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[1,89],$VK=[1,90],$VL=[2,26,28,36],$VM=[2,21],$VN=[1,92],$VO=[1,132],$VP=[1,133],$VQ=[1,126],$VR=[1,127],$VS=[1,128],$VT=[1,129],$VU=[1,130],$VV=[1,131],$VW=[1,134],$VX=[1,135],$VY=[1,136],$VZ=[1,137],$V_=[1,138],$V$=[1,139],$V01=[10,11,29,33,35,36,40,44,45,48,68,69,70,71,72,73,74,75,76,77],$V11=[1,169],$V21=[10,33,40],$V31=[10,11],$V41=[2,5,7,19,20,24,26,33,34,38,49,50,51,53,55,56,57,58,60,63,64,65,66,67],$V51=[10,11,29,33,40,48,76,77],$V61=[1,215],$V71=[10,11,29,33,35,36,40,44,45,48,72,73,74,75,76,77],$V81=[10,11,29,33,35,36,40,44,45,48,68,69,71,72,73,74,75,76,77],$V91=[10,11,29,33,35,36,40,48,72,73,74,75,76,77],$Va1=[10,11,29,33,40,48,72,73,76,77],$Vb1=[10,40],$Vc1=[1,267],$Vd1=[33,53,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"LINS":4,"EOF":5,"INS":6,"Rprint":7,"PARIZQ":8,"Exp":9,"PARDER":10,"PTCOMA":11,"DECLARAR":12,"ASIGNAR":13,"IF":14,"DOWHILE":15,"WHILE":16,"FOR":17,"SWITCH":18,"Rbreak":19,"Rcontinue":20,"FUNCIONES":21,"LLAMADA":22,"RETORNO":23,"Rretorno":24,"TIPO":25,"ID":26,"IGUAL":27,"CORIZR":28,"CORDER":29,"Rnew":30,"LLAVEIZQ":31,"L_EXP":32,"LLAVEDER":33,"Rlist":34,"MENOR":35,"MAYOR":36,"BLOQUE":37,"Rvoid":38,"PARAMETROS":39,"COMA":40,"INCRE":41,"PUNTO":42,"Radd":43,"MAS":44,"MENOS":45,"TERNARIO":46,"RTER":47,"DPUNTOS":48,"Rif":49,"Relse":50,"Rswitch":51,"LCASOS":52,"Rdefault":53,"ELSEIF":54,"Rcase":55,"Rdo":56,"Rwhile":57,"Rfor":58,"ACTUALIZAR":59,"Rexec":60,"CASTEO":61,"TIPO2":62,"Rint":63,"Rdouble":64,"Rstring":65,"Rchar":66,"Rboolean":67,"POR":68,"DIV":69,"POT":70,"MOD":71,"DIFERENTE":72,"IGUALDAD":73,"MAYORI":74,"MENORI":75,"AND":76,"OR":77,"NOT":78,"Cadena":79,"Char":80,"NUMERO":81,"DECIMAL":82,"TRUE":83,"FALSE":84,"RtoString":85,"RtoLower":86,"RtoUpper":87,"Rtruncate":88,"Rround":89,"Rlength":90,"Rtypeof":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Rprint",8:"PARIZQ",10:"PARDER",11:"PTCOMA",19:"Rbreak",20:"Rcontinue",24:"Rretorno",26:"ID",27:"IGUAL",28:"CORIZR",29:"CORDER",30:"Rnew",31:"LLAVEIZQ",33:"LLAVEDER",34:"Rlist",35:"MENOR",36:"MAYOR",38:"Rvoid",40:"COMA",42:"PUNTO",43:"Radd",44:"MAS",45:"MENOS",47:"RTER",48:"DPUNTOS",49:"Rif",50:"Relse",51:"Rswitch",53:"Rdefault",55:"Rcase",56:"Rdo",57:"Rwhile",58:"Rfor",60:"Rexec",63:"Rint",64:"Rdouble",65:"Rstring",66:"Rchar",67:"Rboolean",68:"POR",69:"DIV",70:"POT",71:"MOD",72:"DIFERENTE",73:"IGUALDAD",74:"MAYORI",75:"MENORI",76:"AND",77:"OR",78:"NOT",79:"Cadena",80:"Char",81:"NUMERO",82:"DECIMAL",83:"TRUE",84:"FALSE",85:"RtoString",86:"RtoLower",87:"RtoUpper",88:"Rtruncate",89:"Rround",90:"Rlength",91:"Rtypeof"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,5],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,2],[23,3],[23,2],[12,2],[12,4],[12,10],[12,8],[12,11],[12,3],[21,5],[21,5],[21,6],[21,6],[21,5],[39,4],[39,2],[13,3],[13,2],[13,6],[13,6],[13,8],[13,3],[41,2],[41,2],[46,5],[46,3],[14,5],[14,7],[14,3],[18,10],[18,7],[18,3],[54,5],[54,6],[54,3],[52,4],[52,5],[52,3],[15,6],[15,3],[16,5],[16,3],[37,3],[37,2],[37,3],[17,9],[17,9],[17,3],[59,3],[59,2],[59,2],[22,3],[22,4],[22,4],[22,5],[61,4],[61,3],[62,1],[62,1],[62,1],[62,1],[25,1],[25,1],[25,1],[25,1],[25,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,6],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[32,3],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
imprimibles = [];errores = [];EntornoGlobal = Entorno(null);EjecutarBloque($$[$0-1], EntornoGlobal); return {Entorno:EntornoGlobal, Imprimibles:imprimibles,Errores:errores,Arbol:JSON.stringify($$[$0-1],null,2)}
break;
case 2:
errores.push("Sintactico","Error en : '"+yytext+"'",this._$.first_line,this._$.first_column); console.log("Sintactico","Error en : '"+yytext+"'",this._$.first_line,this._$.first_column)
break;
case 3:
 this.$=$$[$0-1]; this.$.push($$[$0]) 
break;
case 4:
 this.$=[]; this.$.push($$[$0]) 
break;
case 5:
this.$=Imprimir("print",$$[$0-2]);
break;
case 6: case 7: case 9: case 16: case 60:
this.$ = $$[$0-1]
break;
case 8: case 10: case 11: case 12: case 15: case 17:
this.$ = $$[$0]
break;
case 13:
this.$ = Romper()
break;
case 14:
this.$ = Continuar()
break;
case 18:
errores.push("Se recupero en ",yytext," (",this._$.last_line,",",this._$.last_column,")"); console.log("Sintactico","Error en : '"+yytext+"'",this._$.first_line,this._$.first_column);console.log("Se recupero en ",yytext," (",this._$.last_line,",",this._$.last_column,")");
break;
case 19:
 this.$ = Retorno($$[$0-1]); 
break;
case 20:
 this.$ = Retorno(Simbolo("@Vacio@","void")); 
break;
case 21:
this.$ = Crear($$[$0],$$[$0-1],null,null,null)
break;
case 22:
this.$ = Crear($$[$0-2],$$[$0-3],null,null,$$[$0])
break;
case 23:
this.$ = Crear($$[$0-6],$$[$0-9],$$[$0-3],$$[$0-1],null)
break;
case 24:
this.$ = Crear($$[$0-4],$$[$0-7],$$[$0-7],null,$$[$0-1])
break;
case 25:
this.$ = Crear($$[$0-6],$$[$0-8],$$[$0-1],null,null)
break;
case 26: case 39:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")")
break;
case 27:
 this.$ = Funcion($$[$0-3],[],$$[$0-4],$$[$0]); 
break;
case 28:
 this.$ = Funcion($$[$0-3],[],"void",$$[$0]); 
break;
case 29:
 this.$ = Funcion($$[$0-4],$$[$0-2],$$[$0-5],$$[$0]); 
break;
case 30:
 this.$ = Funcion($$[$0-4],$$[$0-2],"void",$$[$0]); 
break;
case 31: case 43: case 46: case 49: case 55: case 57: case 59: case 62: case 65: case 68: case 74:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")");
break;
case 32:
 this.$=$$[$0-3];this.$.push(Crear($$[$0],$$[$0-1],null,null)) 
break;
case 33:
 this.$=[];this.$.push(Crear($$[$0],$$[$0-1],null,null)) 
break;
case 34:
this.$ = Asignar($$[$0-2],$$[$0],null)
break;
case 35:
this.$ = Asignar($$[$0-1],NuevaOperacion(nuevoSimbolo($$[$0-1],"ID"),nuevoSimbolo(parseFloat(1),"numero"),$$[$0]),null)
break;
case 36:
this.$ = Asignar($$[$0-5],$$[$0],$$[$0-3])
break;
case 37:
this.$ = Asignar($$[$0-5],$$[$0-1],nuevoSimbolo("","lista"))
break;
case 38:
this.$ = Asignar($$[$0-7],$$[$0],NuevaOperacion($$[$0-4],nuevoSimbolo(parseFloat(1),"numero"),"+"))
break;
case 40:
this.$= $$[$0-1]
break;
case 41:
this.$=$$[$0-1]
break;
case 42:
this.$ = Ternario($$[$0-4],$$[$0-2],$$[$0])
break;
case 44:
this.$ = Si($$[$0-2],$$[$0],null)
break;
case 45:
this.$ = Si($$[$0-4],$$[$0-2],$$[$0])
break;
case 47:
this.$ = Seleccionar($$[$0-7],$$[$0-4],$$[$0-1])
break;
case 48:
this.$ = Seleccionar($$[$0-4],$$[$0-1],null)
break;
case 50:
this.$=[];this.$.push(ElseIf($$[$0-2],$$[$0]))
break;
case 51:
this.$=$$[$0-5];this.$.push(ElseIf($$[$0-2],$$[$0]))
break;
case 53:
this.$=[];this.$.push(Caso($$[$0-2],$$[$0]));
break;
case 54:
this.$=$$[$0-4];this.$.push(Caso($$[$0-2],$$[$0]));
break;
case 56:
this.$ = HacerMientras($$[$0-1],$$[$0-4])
break;
case 58:
this.$ = new Mientras($$[$0-2],$$[$0]);
break;
case 61:
this.$ = []
break;
case 63: case 64:
this.$ = Desde($$[$0-6],$$[$0-4],$$[$0-2],$$[$0])
break;
case 66:
this.$ = Actualizacion($$[$0-2],$$[$0])
break;
case 67:
this.$ = Actualizacion($$[$0-1],NuevaOperacion(nuevoSimbolo($$[$0-1],"ID"),nuevoSimbolo(parseFloat(1),"numero"),$$[$0]))
break;
case 69: case 71:
 this.$=Llamada($$[$0-2],[]); 
break;
case 70: case 72:
 this.$=Llamada($$[$0-3],$$[$0-1]); 
break;
case 73:
this.$ = Casteo({Expresion:$$[$0],Tipo:$$[$0-2]}, "casteo") 
break;
case 75: case 79:
this.$ = "numero"
break;
case 76: case 80:
this.$ = "decimal"
break;
case 77: case 81:
this.$ = "cadena"
break;
case 78: case 83:
this.$ = "char"
break;
case 82:
this.$ = "bool"
break;
case 84:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"+"); 
break;
case 85:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"-"); 
break;
case 86:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"*"); 
break;
case 87:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"/"); 
break;
case 88:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"^"); 
break;
case 89:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"%"); 
break;
case 90:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"<"); 
break;
case 91:
 this.$=NuevaOperacion($$[$0-2],$$[$0],">"); 
break;
case 92:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"!="); 
break;
case 93:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"=="); 
break;
case 94:
 this.$=NuevaOperacion($$[$0-2],$$[$0],">="); 
break;
case 95:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"<="); 
break;
case 96:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"&&"); 
break;
case 97:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"||"); 
break;
case 98:
 this.$=NuevaOperacion($$[$0-2],nuevoSimbolo(parseFloat(1),"numero"),"+")
break;
case 99:
 this.$=NuevaOperacion($$[$0-2],nuevoSimbolo(parseFloat(1),"numero"),"-")
break;
case 100:
 this.$=NuevaOperacionUnario($$[$0],"!"); 
break;
case 101:
 this.$=NuevaOperacionUnario($$[$0],"umenos"); 
break;
case 102:
 this.$=nuevoSimbolo($$[$0],"cadena"); 
break;
case 103:
 this.$=nuevoSimbolo($$[$0],"char"); 
break;
case 104:
 this.$=nuevoSimbolo($$[$0],"ID");
break;
case 105:
 this.$=nuevoSimbolo({Id:$$[$0-2],Params:[]},"funcion"); 
break;
case 106:
 this.$=nuevoSimbolo({Id:$$[$0-3],Params:$$[$0-1]},"funcion"); 
break;
case 107:
 this.$=nuevoSimbolo({Id:$$[$0-3],Params:$$[$0-1]},"vector")
break;
case 108:
 this.$=nuevoSimbolo({Id:$$[$0-5],Params:$$[$0-2]},"lista")
break;
case 109:
 this.$=nuevoSimbolo(parseFloat($$[$0]),"numero"); 
break;
case 110:
 this.$=nuevoSimbolo(parseFloat($$[$0]),"decimal"); 
break;
case 111:
 this.$=nuevoSimbolo(true,"bool"); 
break;
case 112:
 this.$=nuevoSimbolo(false,"bool"); 
break;
case 113:
 this.$=$$[$0-1]
break;
case 114:
 this.$ = nuevoSimbolo({Id:$$[$0],Tipo:$$[$0-2]}, "casteo") 
break;
case 115:
 this.$ = nuevoSimbolo({Id:$$[$0-1],Tipo:"cadena"}, "casteo") 
break;
case 116:
 this.$ = nuevoSimbolo({Id:$$[$0-1],Tipo:"lower"}, "casteo") 
break;
case 117:
 this.$ = nuevoSimbolo({Id:$$[$0-1],Tipo:"upper"}, "casteo") 
break;
case 118:
 this.$ = nuevoSimbolo({Id:$$[$0-1],Tipo:"truncate"}, "casteo") 
break;
case 119:
 this.$ = nuevoSimbolo({Id:$$[$0-1],Tipo:"round"}, "casteo") 
break;
case 120:
 this.$ = nuevoSimbolo({Id:$$[$0-1],Tipo:"length"}, "casteo")
break;
case 121:
 this.$ = nuevoSimbolo({Id:$$[$0-1],Tipo:"typeof"}, "casteo")
break;
case 122:
 this.$=$$[$0-2];this.$.push($$[$0]); 
break;
case 123:
 this.$=[];this.$.push($$[$0]); 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{1:[3]},{2:$Vi,5:[1,34],6:35,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{2:$Vi,5:[1,37],6:38,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},o($Vj,[2,4]),{8:[1,39]},{11:[1,40]},{11:[1,41]},o($Vj,[2,8]),{11:[1,42]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{11:[1,43]},{11:[1,44]},o($Vj,[2,15]),{11:[1,45]},o($Vj,[2,17]),{2:$Vk,26:[1,46],28:$Vl},{35:[1,49]},{2:$Vm,8:[1,55],27:$Vn,28:$Vo,41:51,42:$Vp,44:$Vq,45:$Vr},{2:[1,59],8:[1,58]},{2:[1,61],31:$Vs,33:$Vt,37:60},{2:[1,65],8:[1,64]},{2:[1,67],8:[1,66]},{2:[1,69],8:[1,68]},{26:[1,70]},{26:[1,71]},{8:$Vu,9:72,11:[1,73],26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($VL,[2,79]),o($VL,[2,80]),o($VL,[2,81]),o($VL,[2,82]),o($VL,[2,83]),{1:[2,1]},o($Vj,[2,3]),{2:$Vi,6:38,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{1:[2,2]},o($Vj,[2,18]),{8:$Vu,9:91,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,9]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,16]),{8:[1,93],11:$VM,27:$VN},{29:[1,94]},{11:[1,95]},{25:96,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{8:$Vu,9:97,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{11:[2,35]},{8:$Vu,9:98,26:$Vv,28:[1,99],45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{43:[1,100]},{11:[1,101]},{8:$Vu,9:104,10:[1,102],26:$Vv,32:103,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{44:[1,105]},{45:[1,106]},{8:$Vu,9:107,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{33:[1,108]},{57:[1,109]},{11:[1,110]},{2:$Vi,4:111,6:4,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,33:[1,112],34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{2:[1,113]},{8:$Vu,9:114,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{10:[1,115]},{12:117,13:116,25:119,26:[1,118],34:$V5,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{33:[1,120]},{8:$Vu,9:121,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{33:[1,122]},{8:[1,123]},{8:[1,124]},{11:[1,125],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($Vj,[2,20]),{8:$Vu,9:140,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:141,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($V01,[2,102]),o($V01,[2,103]),o($V01,[2,104],{8:[1,142],28:[1,143]}),o($V01,[2,109]),o($V01,[2,110]),o($V01,[2,111]),o($V01,[2,112]),{8:$Vu,9:144,26:$Vv,45:$Vw,62:145,63:[1,146],64:[1,147],65:[1,148],66:[1,149],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:[1,150]},{8:[1,151]},{8:[1,152]},{8:[1,153]},{8:[1,154]},{8:[1,155]},{8:[1,156]},{10:[1,157],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{8:$Vu,9:158,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{2:[1,161],10:[1,159],25:162,39:160,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{26:[1,163]},{11:[2,26]},{36:[1,164]},{11:[2,34],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{29:[1,165],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{8:$Vu,9:166,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:[1,167]},{11:[2,39]},{11:[2,69]},{10:[1,168],40:$V11},o($V21,[2,123],{35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$}),o($V31,[2,40]),o($V31,[2,41]),{10:[1,170],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($Vj,[2,46]),{8:[1,171]},{11:[2,57]},{2:$Vi,6:35,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,33:[1,172],34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},o($V41,[2,61]),{33:[1,173]},{10:[1,174],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($Vj,[2,59]),{11:[1,175]},{11:[1,176]},{2:$Vm,27:$Vn,28:$Vo,41:51,42:$Vp,44:$Vq,45:$Vr},{2:$Vk,26:[1,177],28:$Vl},o($Vj,[2,65]),{10:[1,178],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($Vj,[2,49]),{10:[1,179],25:162,39:180,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{8:$Vu,9:104,10:[1,181],26:$Vv,32:182,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($Vj,[2,19]),{8:$Vu,9:183,26:$Vv,44:[1,184],45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:185,26:$Vv,45:[1,186],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:187,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:188,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:189,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:190,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:191,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:192,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:193,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:194,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:195,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:196,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:197,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:198,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($V51,[2,100],{35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ}),o($V01,[2,101]),{8:$Vu,9:104,10:[1,199],26:$Vv,32:200,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:201,26:$Vv,28:[1,202],45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{10:[1,203],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{10:[1,204]},{10:[2,75]},{10:[2,76]},{10:[2,77]},{10:[2,78]},{8:$Vu,9:205,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:206,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:207,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:208,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:209,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:210,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:211,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{11:[1,212]},{11:[2,22],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{31:$Vs,33:$Vt,37:213},{10:[1,214],40:$V61},{31:$Vs,33:$Vt,37:216},{26:[1,217]},{27:[1,218]},{26:[1,219]},{27:[1,220]},{29:[1,221],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{8:$Vu,9:222,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{11:[2,70]},{8:$Vu,9:223,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{31:$Vs,33:$Vt,37:224},{8:$Vu,9:225,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($V41,[2,60]),o($V41,[2,62]),{31:$Vs,33:$Vt,37:226},{8:$Vu,9:227,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{8:$Vu,9:228,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{11:$VM,27:$VN},{31:[1,229]},{31:$Vs,33:$Vt,37:230},{10:[1,231],40:$V61},{11:[2,71]},{10:[1,232],40:$V11},o($V71,[2,84],{68:$VS,69:$VT,70:$VU,71:$VV}),o($V01,[2,98]),o($V71,[2,85],{68:$VS,69:$VT,70:$VU,71:$VV}),o($V01,[2,99],{9:141,8:$Vu,26:$Vv,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK}),o($V81,[2,86],{70:$VU}),o($V81,[2,87],{70:$VU}),o($V01,[2,88]),o($V81,[2,89],{70:$VU}),o($V91,[2,90],{44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV}),o($V91,[2,91],{44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV}),o($Va1,[2,92],{35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,74:$VY,75:$VZ}),o($Va1,[2,93],{35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,74:$VY,75:$VZ}),o($V91,[2,94],{44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV}),o($V91,[2,95],{44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV}),o($V51,[2,96],{35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ}),o([10,11,29,33,40,48,77],[2,97],{35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_}),o($V01,[2,105]),{10:[1,233],40:$V11},{29:[1,234],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{8:$Vu,9:235,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($V01,[2,113]),{8:$Vu,9:236,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{10:[1,237],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{10:[1,238],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{10:[1,239],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{10:[1,240],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{10:[1,241],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{10:[1,242],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{10:[1,243],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($Vj,[2,5]),o($Vj,[2,27]),{31:$Vs,33:$Vt,37:244},{25:245,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},o($Vj,[2,31]),o($Vb1,[2,33]),{30:[1,246],31:[1,247]},{27:[1,248]},{8:$Vu,9:249,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{29:[1,250]},{10:[1,251],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($V21,[2,122],{35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$}),o($Vj,[2,44],{50:[1,252]}),{10:[1,253],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($Vj,[2,58]),{11:[1,254],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{11:[1,255],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{52:256,55:[1,257]},o($Vj,[2,28]),{31:$Vs,33:$Vt,37:258},{11:[2,72]},o($V01,[2,106]),o($V01,[2,107]),{29:[1,259],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($V51,[2,114],{35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ}),o($V01,[2,115]),o($V01,[2,116]),o($V01,[2,117]),o($V01,[2,118]),o($V01,[2,119]),o($V01,[2,120]),o($V01,[2,121]),o($Vj,[2,29]),{26:[1,260]},{25:261,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{8:$Vu,9:104,26:$Vv,32:262,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{30:[1,263]},{11:[2,36],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{27:[1,264]},{11:[2,37]},{31:$Vs,33:$Vt,37:265},{11:[2,56]},{26:$Vc1,59:266},{26:$Vc1,59:268},{33:[1,270],53:[1,269],55:[1,271]},{2:[1,273],8:$Vu,9:272,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($Vj,[2,30]),{29:[1,274]},o($Vb1,[2,32]),{28:[1,275]},{33:[1,276],40:$V11},{34:[1,277]},{8:$Vu,9:278,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},o($Vj,[2,45]),{10:[1,279]},{2:[1,282],27:[1,280],41:281,44:$Vq,45:$Vr},{10:[1,283]},{48:[1,284]},o($Vj,[2,48]),{8:$Vu,9:285,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{35:$VO,36:$VP,44:$VQ,45:$VR,48:[1,286],68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{10:[1,287]},o($V01,[2,108]),{8:$Vu,9:288,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{11:[2,24]},{35:[1,289]},{11:[2,38],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{31:$Vs,33:$Vt,37:290},{8:$Vu,9:291,26:$Vv,45:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK},{10:[2,67]},{10:[2,68]},{31:$Vs,33:$Vt,37:292},{2:$Vi,4:293,6:4,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{35:$VO,36:$VP,44:$VQ,45:$VR,48:[1,294],68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{2:$Vi,4:295,6:4,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},o($Vd1,[2,55]),{29:[1,296],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},{25:297,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},o($Vj,[2,63]),{10:[2,66],35:$VO,36:$VP,44:$VQ,45:$VR,68:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:$VZ,76:$V_,77:$V$},o($Vj,[2,64]),{2:$Vi,6:35,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,33:[1,298],34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{2:$Vi,4:299,6:4,7:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V1,20:$V2,21:15,22:16,23:17,24:$V3,25:18,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},o($Vd1,[2,53],{12:6,13:7,14:8,15:9,16:10,17:11,18:12,21:15,22:16,23:17,25:18,6:35,2:$Vi,7:$V0,19:$V1,20:$V2,24:$V3,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh}),{11:[2,23]},{36:[1,300]},o($Vj,[2,47]),o($Vd1,[2,54],{12:6,13:7,14:8,15:9,16:10,17:11,18:12,21:15,22:16,23:17,25:18,6:35,2:$Vi,7:$V0,19:$V1,20:$V2,24:$V3,26:$V4,34:$V5,38:$V6,49:$V7,51:$V8,56:$V9,57:$Va,58:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh}),{11:[2,25]}],
defaultActions: {34:[2,1],37:[2,2],51:[2,35],95:[2,26],101:[2,39],102:[2,69],110:[2,57],146:[2,75],147:[2,76],148:[2,77],149:[2,78],168:[2,70],181:[2,71],232:[2,72],251:[2,37],253:[2,56],276:[2,24],281:[2,67],282:[2,68],296:[2,23],300:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var imprimibles = [];
    var errores = [];
    var pilaCiclosSw = [];
    var pilaFunciones = [];

  	// entorno
  	const Entorno = function(anterior)
    {
    	return {
        	tablaSimbolos:new Map(),
          	anterior:anterior
        }
    }
  	var EntornoGlobal = Entorno(null)
  	//Ejecuciones
    function EjecutarBloque(LINS, ent)
	{
        var retorno=null;
        for(var elemento of LINS)
        {
        	switch(elemento.TipoInstruccion)
          	{
            	case "print":
                    // console.log(elemento);
                    var res = Evaluar(elemento.Operacion, ent);
                    imprimibles.push(res.Valor+"");
                    break;
                case "crear":
                    retorno = EjecutarCrear(elemento, ent);
                    break;
                case "asignar":
                    retorno = EjecutarAsignar(elemento, ent);
                    break;
                case "if":
                    retorno = EjecutarSi(elemento, ent);
                    break;
                case "while":
                    retorno = EjecutarMientras(elemento, ent);
                    break;
                case "dowhile":
                    retorno = EjecutarHacerMientras(elemento,ent);
                    break;
                case "for":
                    retorno = EjecutarDesde(elemento, ent);
                    break;
                case "switch":
                    retorno = EjecutarSeleccionar(elemento, ent);
                    break;
                case "funcion":
                    retorno = EjecutarFuncion(elemento, EntornoGlobal);
                    break;
                case "llamada":
                    EjecutarLlamada(elemento,ent);
                    retorno = null
                    break

                case "return":
                    if (pilaFunciones.length>0)
                    {
                        retorno = elemento.Expresion;
                    }
                    else
                    {
                        console.log("Intruccion retorno fuera de una funcion")
                    }
                    break;
                case "break":
                    if (pilaCiclosSw.length>0)
                    {
                        return elemento;
                    }
                    else
                    {
                        console.log("Intruccion break fuera de un switch o un ciclo")
                    }
                case "continue":
                    if(pilaCiclosSw.length>0)
                    {
                        return elemento
                    }
                    else
                    {
                        console.log("Intruccion continue fuera de un ciclo")
                    }

                    
          	}
            if(retorno)
            {
                return retorno;
            }
        }
        return null;
    }
    //Expresion
    function nuevoSimbolo(Valor,Tipo){
        return{
            Valor:Valor,
            Tipo:Tipo
        }
    }
    const NuevaOperacion= function(OperandoIzq,OperandoDer,Tipo)
    {
        return{
            OperandoIzq:OperandoIzq,
            OperandoDer:OperandoDer,
            Tipo:Tipo
        }
    }
    function NuevaOperacionUnario(Operando,Tipo)
    {
        return{
            OperandoIzq:Operando,
            OperandoDer:null,
            Tipo:Tipo
        }
    }
    function Evaluar(Operacion,ent)
    {
        var Valorizq=null;
        var Valorder=null;
        //Simbolos
        switch(Operacion.Tipo)
        {
            case "bool":
                return nuevoSimbolo(Operacion.Valor,Operacion.Tipo);
            case "cadena":
                return nuevoSimbolo(Operacion.Valor,Operacion.Tipo);
            case "char":
                return nuevoSimbolo(Operacion.Valor.charAt(0),Operacion.Tipo)
            case "numero":
                return nuevoSimbolo(parseFloat(Operacion.Valor),Operacion.Tipo);
            case "decimal":
                return nuevoSimbolo(parseFloat(Operacion.Valor),Operacion.Tipo);
            case "ID":
                var temp=ent;
                while(temp!=null)
                {
                    if(temp.tablaSimbolos.has(Operacion.Valor))
                    {
                        var valorID = temp.tablaSimbolos.get(Operacion.Valor);
                        if (Array.isArray(valorID))
                        {
                            var datos = "[";
                            for (var i = 0; i < valorID.length; i++) {
                                datos += valorID[i].Valor + ",";
                            }
                            datos = datos.substring(0, datos.length - 1);
                            datos += "]";
                            return nuevoSimbolo(datos,'cadena');
                        }
                        else
                        {
                            return nuevoSimbolo(valorID.Valor,valorID.Tipo);
                        }
                    }
                    temp=temp.anterior;
                }
                console.log("No existe la variable " + Operacion.Valor);
                errores.push("No existe la variable " + Operacion.Valor);
                return nuevoSimbolo("@error@","error");
            case "vector":
                var aux1 = Evaluar(Operacion.Valor.Params,ent)
                var temp=ent;
                while(temp!=null)
                {
                    if(temp.tablaSimbolos.has(Operacion.Valor.Id))
                    {
                        var valorID = temp.tablaSimbolos.get(Operacion.Valor.Id);
                        if(aux1.Tipo =="numero" && aux1.Valor>=0 && aux1.Valor<valorID.length)
                        {
                            valorID = valorID[aux1.Valor]
                            return nuevoSimbolo(valorID.Valor,valorID.Tipo);
                        }
                        else
                        {
                            console.log("No existe la posicion " + aux1.Valor);
                            return nuevoSimbolo("@error@","error");
                        }
                    }
                    temp=temp.anterior;
                }
                console.log("No existe la variable " + Operacion.Valor);
                return nuevoSimbolo("@error@","error");
                break;
            case "lista":
                var aux1 = Evaluar(Operacion.Valor.Params,ent)
                var temp=ent;
                while(temp!=null)
                {
                    if(temp.tablaSimbolos.has(Operacion.Valor.Id))
                    {
                        var valorID = temp.tablaSimbolos.get(Operacion.Valor.Id);
                        if(aux1.Tipo =="numero" && aux1.Valor>=0 && aux1.Valor<valorID.length)
                        {
                            valorID = valorID[aux1.Valor+1]
                            return nuevoSimbolo(valorID.Valor,valorID.Tipo);
                        }
                        else
                        {
                            console.log("No existe la posicion " + aux1.Valor);
                            return nuevoSimbolo("@error@","error");
                        }
                    }
                    temp=temp.anterior;
                }
                console.log("No existe la variable " + Operacion.Valor);
                return nuevoSimbolo("@error@","error");
                break;
            case "funcion":
                var res = EjecutarLlamada(Llamada(Operacion.Valor.Id,Operacion.Valor.Params), ent)
                return res
            case "casteo":
                var res = EjecutarCasteo(Casteo(Operacion.Valor.Id,Operacion.Valor.Tipo), ent)
                return res;
        }
        //Operaciones
        Valorizq = Evaluar(Operacion.OperandoIzq, ent);
        if(Operacion.OperandoDer!=null)
        {
            Valorder=Evaluar(Operacion.OperandoDer, ent);
        }
        var tipoRetorno = "error";
        // identificar qué operaciones sí podemos realizar dependiendo del tipo
        switch (Operacion.Tipo)
        {
            case "+":
                switch(Valorizq.Tipo)
                {
                    case "numero":
                        if(!Valorder){
                            tipoRetorno="numero";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                            case "bool":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                            case "char":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor.charCodeAt(0), tipoRetorno);
                                break;
                            case "cadena":
                                tipoRetorno = "cadena";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                    case "decimal":
                        // decimal puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="decimal";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);	
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                            case "bool":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                            case "char":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor.charCodeAt(0), tipoRetorno);	
                                break;
                            case "cadena":
                                tipoRetorno = "cadena";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                    case "bool":
                        // bool puede sumarse con numero, decimal y cadena
                        if(!Valorder){
                            tipoRetorno="bool";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);	
                                break;
                            case "cadena":
                                tipoRetorno = "cadena";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                    case "char":
                        // char puede sumarse con numero, decimal, char y cadena
                        if(!Valorder){
                            tipoRetorno="char";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor.charCodeAt(0) + Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor.charCodeAt(0) + Valorder.Valor, tipoRetorno);
                                break;
                            case "char":
                                tipoRetorno = "cadena";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                            case "cadena":
                                tipoRetorno = "cadena";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                    case "cadena":
                        // cadena puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="decimal";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                            case "decimal":
                            case "bool":
                            case "char":
                            case "cadena":
                                tipoRetorno = "cadena";	
                                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;

                }
            case "-":
                switch(Valorizq.Tipo)
                {
                    case "numero":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="numero";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);	
                                break;
                            case "bool":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                                break;
                            case "char":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor.charCodeAt(0), tipoRetorno);
                                break;
                        }
                        break;
                    case "decimal":
                        // decimal puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="decimal";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);	
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                                break;
                            case "bool":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                                break;
                            case "char":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor.charCodeAt(0), tipoRetorno);
                                break;
                        }
                        break;
                    case "bool":
                        // bool puede sumarse con numero, decimal y cadena
                        if(!Valorder){
                            tipoRetorno="bool";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                    case "char":
                        // char puede sumarse con numero, decimal, char y cadena
                        if(!Valorder){
                            tipoRetorno="char";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor.charCodeAt(0) - Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor.charCodeAt(0) - Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                }
            case "*":
                switch(Valorizq.Tipo)
                {
                    case "numero":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="numero";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor * Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor * Valorder.Valor, tipoRetorno);	
                                break;
                            case "char":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor * Valorder.Valor.charCodeAt(0), tipoRetorno);
                                break;
                        }
                        break;
                    case "decimal":
                        // decimal puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="decimal";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor * Valorder.Valor, tipoRetorno);	
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor * Valorder.Valor, tipoRetorno);	
                                break;
                            case "char":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor * Valorder.Valor.charCodeAt(0), tipoRetorno);	
                                break;
                        }
                        break;
                    case "char":
                        // char puede sumarse con numero, decimal, char y cadena
                        if(!Valorder){
                            tipoRetorno="char";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Valorizq.Valor.charCodeAt(0) * Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor.charCodeAt(0) * Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                }
            case "/":
                switch(Valorizq.Tipo)
                {
                    case "numero":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="numero";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor / Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor / Valorder.Valor, tipoRetorno);
                                break;
                            case "char":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor / Valorder.Valor.charCodeAt(0), tipoRetorno);	
                                break;
                        }
                        break;
                    case "decimal":
                        // decimal puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="decimal";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Valorizq.Valor / Valorder.Valor, tipoRetorno);	
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor / Valorder.Valor, tipoRetorno);
                                break;
                            case "char":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor / Valorder.Valor.charCodeAt(0), tipoRetorno);
                                break;
                        }
                        break;
                    case "char":
                        // char puede sumarse con numero, decimal, char y cadena
                        if(!Valorder){
                            tipoRetorno="char";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor.charCodeAt(0) / Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor.charCodeAt(0) / Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                }
            case "^":
                switch(Valorizq.Tipo)
                {
                    case "numero":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="numero";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "numero";	
                                return nuevoSimbolo(Math.pow(Valorizq.Valor , Valorder.Valor), tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Math.pow(Valorizq.Valor , Valorder.Valor), tipoRetorno);
                                break;
                        }
                        break;
                    case "decimal":
                        // decimal puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="decimal";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Math.pow(Valorizq.Valor , Valorder.Valor), tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";
                                return nuevoSimbolo(Math.pow(Valorizq.Valor , Valorder.Valor), tipoRetorno);	
                                break;
                        }
                        break;
                }
            case "%":
                switch(Valorizq.Tipo)
                {
                    case "numero":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="numero";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor % Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor % Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                    case "decimal":
                        // decimal puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="decimal";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor % Valorder.Valor, tipoRetorno);
                                break;
                            case "decimal":
                                tipoRetorno = "decimal";	
                                return nuevoSimbolo(Valorizq.Valor % Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                }
            case "umenos":
                switch(Valorizq.Tipo)
                {
                    case "numero":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="numero";
                            return nuevoSimbolo(0-Valorizq.Valor, tipoRetorno);
                            break;
                        }
                        break;
                    case "decimal":
                        // decimal puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="decimal";
                            return nuevoSimbolo(0-Valorizq.Valor, tipoRetorno);
                            break;
                        }
                        break;
                }
                break;
            case "!":
                switch(Valorizq.Tipo)
                {
                    case "bool":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="bool";
                            return nuevoSimbolo(!Valorizq.Valor, tipoRetorno);
                            break;
                        }                   
                        break;
                }
                break;
            case "&&":
                switch(Valorizq.Tipo)
                {
                    case "bool":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="bool";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "bool":
                                tipoRetorno = "bool";	
                                return nuevoSimbolo(Valorizq.Valor && Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                }
                break;
            case "||":
                switch(Valorizq.Tipo)
                {
                    case "bool":
                        // numero puede sumarse con cualquier otro tipo
                        if(!Valorder){
                            tipoRetorno="bool";
                            break;
                        }
                        switch(Valorder.Tipo)
                        {
                            case "bool":
                                tipoRetorno = "bool";	
                                return nuevoSimbolo(Valorizq.Valor || Valorder.Valor, tipoRetorno);
                                break;
                        }
                        break;
                }
                break;
            case "==":
                switch(Valorizq.Tipo)
                {
                    case "cadena":
                        switch(Valorder.Tipo)
                        {
                            case "cadena":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor == Valorder.Valor, tipoRetorno);	
                        }
                        break;
                    case "bool":
                        switch(Valorder.Tipo)
                        {
                            case "bool":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor == Valorder.Valor, tipoRetorno) 
                        }
                        break;
                    case "char":
                    case "numero":
                    case "decimal":
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                            case "decimal":
                            case "char":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor == Valorder.Valor, tipoRetorno)    
                        }
                        break;
                    
                    
                }
                break;
            case "!=":
                switch(Valorizq.Tipo)
                {
                    case "char":
                    case "numero":
                    case "decimal":
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                            case "decimal":
                            case "char":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor != Valorder.Valor, tipoRetorno)    
                        }
                        break;
                    case "bool":
                        switch(Valorder.Tipo)
                        {
                            case "bool":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor != Valorder.Valor, tipoRetorno) 
                        }
                        break;
                    case "cadena":
                        switch(Valorder.Tipo)
                        {
                            case "cadena":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor != Valorder.Valor, tipoRetorno);	
                        }
                        break;
                }
                break;
            case ">":
                switch(Valorizq.Tipo)
                {
                    case "char":
                    case "numero":
                    case "decimal":
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                            case "decimal":
                            case "char":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor > Valorder.Valor, tipoRetorno)    
                        }
                        break;
                    case "bool":
                        switch(Valorder.Tipo)
                        {
                            case "bool":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor > Valorder.Valor, tipoRetorno) 
                        }
                        break;
                    case "cadena":
                        switch(Valorder.Tipo)
                        {
                            case "cadena":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor > Valorder.Valor, tipoRetorno);	
                        }
                        break;
                }
                break;
            case "<":
                switch(Valorizq.Tipo)
                {
                    case "char":
                    case "numero":
                    case "decimal":
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                            case "decimal":
                            case "char":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor < Valorder.Valor, tipoRetorno)    
                        }
                        break;
                    case "bool":
                        switch(Valorder.Tipo)
                        {
                            case "bool":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor < Valorder.Valor, tipoRetorno) 
                        }
                        break;
                    case "cadena":
                        switch(Valorder.Tipo)
                        {
                            case "cadena":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor < Valorder.Valor, tipoRetorno);	
                        }
                        break;
                }
                break;
            case ">=":
                switch(Valorizq.Tipo)
                {
                    case "char":
                    case "numero":
                    case "decimal":
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                            case "decimal":
                            case "char":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor >= Valorder.Valor, tipoRetorno)    
                        }
                        break;
                    case "bool":
                        switch(Valorder.Tipo)
                        {
                            case "bool":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor >= Valorder.Valor, tipoRetorno) 
                        }
                        break;
                    case "cadena":
                        switch(Valorder.Tipo)
                        {
                            case "cadena":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor >= Valorder.Valor, tipoRetorno);	
                        }
                        break;
                }
                break;
                break;
            case "<=":
                switch(Valorizq.Tipo)
                {
                    case "char":
                    case "numero":
                    case "decimal":
                        switch(Valorder.Tipo)
                        {
                            case "numero":
                            case "decimal":
                            case "char":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor <= Valorder.Valor, tipoRetorno)    
                        }
                        break;
                    case "bool":
                        switch(Valorder.Tipo)
                        {
                            case "bool":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor <= Valorder.Valor, tipoRetorno) 
                        }
                        break;
                    case "cadena":
                        switch(Valorder.Tipo)
                        {
                            case "cadena":
                                tipoRetorno = "bool";
                                return nuevoSimbolo(Valorizq.Valor <= Valorder.Valor, tipoRetorno);	
                        }
                        break;
                }
                break;
        }
        errores.push("Error Semantico: Tipos incompatibles " + ( Valorizq ? Valorizq.Tipo : "" ) + 
        " y " + ( Valorder ? Valorder.Tipo : "" ))
        console.log(
        "Tipos incompatibles " + ( Valorizq ? Valorizq.Tipo : "" ) + 
        " y " + ( Valorder ? Valorder.Tipo : "" )); 
        return nuevoSimbolo("@error@", "error");

    }
    //Imprimir
    const Imprimir=function(TipoInstruccion,Operacion)
    {
        return {
            TipoInstruccion:TipoInstruccion,
            Operacion:Operacion
        }
    }
    //Crear
    const Crear = function(id, tipo,tipo2,dimension,expresion)
    {

        return {
            Id: id,
            Tipo: tipo,
            Tipo2: tipo2,
            Dimension: dimension,
            Expresion: expresion,
            TipoInstruccion: "crear"
        }
    }
    function EjecutarCrear(crear,ent)
    {
        if(ent.tablaSimbolos.has(crear.Id)) //Validar si existe la variable
        {
            //error
            errores.push("La variable ",crear.Id," ya ha sido declarada en este ambito")
            console.log("La variable ",crear.Id," ya ha sido declarada en este ambito");
      		return;
        }
        var valor;
        if (crear && crear.Expresion)
        {
            if(!crear.Tipo2)
            {
                valor = Evaluar(crear.Expresion,ent);    
                if(valor.Tipo != crear.Tipo)
                {
                    //error
                    errores.push("El tipo no coincide con la variable a crear: ", crear.Tipo)
                    console.log("El tipo no coincide con la variable a crear");                    
                    return
                }
            }
            else
            {
                //string [] a = {"Diego"};
                if(crear.Tipo == crear.Tipo2)
                {
                    crear.Tipo2 = "vector";
                    valor = []
                    for(var exp of crear.Expresion)
                    {
                        valore = Evaluar(exp,ent)
                        if(valore.Tipo == crear.Tipo)
                        {
                            valor.push(valore)
                        }
                        else
                        {
                            errores.push("Los tipos de datos no coinciden: ", valore.Tipo, " y ", crear.Tipo)
                            console.log("Los tipos de datos no coinciden: ", valore.Tipo, " y ", crear.Tipo)
                            return
                        }
                    }

                }
                else
                {
                    errores.push("Los tipos de datos no coinciden: ", crear.Tipo, " y ", crear.Tipo2)
                    console.log("Los tipos de datos no coinciden", crear.Tipo, " y ", crear.Tipo2)
                    return
                }
            }

        }
        else
        {
            if(!crear.Tipo2)
            {
                switch(crear.Tipo)
                {
                    case "numero":
                        valor = nuevoSimbolo(0,"numero");
                        break;
                    case "decimal":
                        valor = nuevoSimbolo("0.00","decimal");
                        break;
                    case "bool":
                        valor = nuevoSimbolo(true,"bool");
                        break;
                    case "char":
                        valor = nuevoSimbolo('\u0000',"char");
                        break;
                    case "cadena":
                        valor = nuevoSimbolo("","cadena");
                        break;
                }
            }
            else
            {
                if(crear.Tipo == crear.Tipo2) 
                {
                    var dimension;
                    valor = []
                    if(crear.Dimension) 
                    {
                        crear.Tipo2 = "vector";
                        dimension = Evaluar(crear.Dimension,ent)
                        var tmp = ""
                        for(var exp = 0; exp<dimension.Valor; exp++)
                        {
                            switch(crear.Tipo)
                            {
                                case "numero":
                                    tmp = nuevoSimbolo(0,"numero");
                                    break;
                                case "decimal":
                                    tmp = nuevoSimbolo("0.00","decimal");
                                    break;
                                case "char":
                                    tmp = nuevoSimbolo('\u0000',"char");
                                    break;
                                case "cadena":
                                    tmp = nuevoSimbolo("","cadena");
                                    break;
                            }
                            valor.push(tmp)
                        }
                    }
                    else
                    {
                        crear.Tipo2 = "lista";
                        valor.push(nuevoSimbolo("lista",crear.Tipo))
                    }
                }
                else
                {
                    errores.push("Los tipos de datos no coinciden: ", crear.Tipo, " y ", crear.Tipo2)
                    console.log("Los tipos de datos no coinciden")
                    return
                }
            }
        }
        //Crear objeto a insertar  []
        ent.tablaSimbolos.set(crear.Id, valor);
        console.log("ENTORNO")
        console.log(ent);
    }
    //Asignar
    const Asignar = function(id,Expresion,Expresion2)
    {
        return{
            Id: id,
            Expresion: Expresion,
            Expresion2: Expresion2,
            TipoInstruccion: "asignar"
        }
    }
    function EjecutarAsignar (asignar,ent) 
	{
      	//Evaluar la expresion
      	var valor = Evaluar(asignar.Expresion,ent);
        // validar si existe la variable
      	temp=ent;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(asignar.Id))
            {
                // evaluar el resultado de la expresión 
                var simbolotabla = temp.tablaSimbolos.get(asignar.Id);
                if(!asignar.Expresion2)
                {
                    //console.log("Chale entro aqui :c")
                    if(valor.Tipo =="char")
                    {
                        if(valor.Valor.length!=0)
                        {
                            //error
                            errores.push("No se puede asignar "+valor.Valor+" tipo no compatible con char")
                            console.log("No se puede asignar "+valor.Valor+" tipo no compatible con char")
                            return
                        }
                    }
                    if(simbolotabla.Tipo =="decimal" && valor.Tipo =="numero")
                    {
                        valor.Tipo = "decimal";
                    }

                    if (simbolotabla.Tipo == valor.Tipo)
                    {
                        // reasignar el valor
                        temp.tablaSimbolos.set(asignar.Id, valor);
                        return
                    }
                    else
                    {
                        //error
                        console.log("Tipos incompatibles ",simbolotabla.Tipo," , ",valor.Tipo)
                        return
                    }
                }
                else
                {

                    if(asignar.Expresion2.Tipo != "lista")
                    {
                        var aux = Evaluar(asignar.Expresion2,ent)
                        if(aux.Tipo == "numero" && valor.Tipo == simbolotabla[0].Tipo)
                        {
                            if(aux.Valor >=0 && aux.Valor<simbolotabla.length)
                            {
                                simbolotabla[aux.Valor] = valor
                                return;
                            }
                            else
                            {
                                errores.push("Ocurrio un error durante la asignacion del valor en el vector: ", asignar.Id)
                                console.log("Ocurrio un error durante la asignacion del valor en el vector: ", asignar.Id)
                                return
                            }
                        }
                        else
                        {
                            errores.push("Ocurrio un error durante la asignacion del valor en el vector: ", asignar.Id)
                            console.log("Ocurrio un error durante la asignacion del valor en el vector: ", asignar.Id)
                            return
                        }
                    }
                    else
                    {
                        if(valor.Tipo == simbolotabla[0].Tipo)
                        {                              
                            simbolotabla.push(valor);
                            temp.tablaSimbolos.set(asignar.Id, simbolotabla);
                            return
                        }
                    }
                }
            }
            temp=temp.anterior;
        }
        errores.push("No se encontro la varible ", asignar.Id);
        console.log("No se encontro la variable ",asignar.Id);
    }
    //If
    const Si=function(Condicion,BloqueSi,BloqueElse)
    {
          return {
            Condicion:Condicion,
            BloqueSi:BloqueSi,
            BloqueElse:BloqueElse,
            TipoInstruccion:"if"
          }
    }
    function EjecutarSi (si,ent)
    {
    	var res = Evaluar(si.Condicion, ent);
        if(res.Tipo=="bool")
        {
        	if(res.Valor)
          	{
      	        var nuevosi=Entorno(ent);
            	return EjecutarBloque(si.BloqueSi, nuevosi);
          	}
          	else if(si.BloqueElse!=null)
          	{
      	        var nuevosino=Entorno(ent);
            	return EjecutarBloque(si.BloqueElse, nuevosino);
        	}
    	}
        else
        {
            errores.push("Se esperaba una condicion dentro del If");
            console.log("Se esperaba una condicion dentro del If");
        }
    }
    const ElseIf = function(Expresion,Bloque)
    {
        return{
            Expresion: Expresion,
            Bloque: Bloque
        }
    }
    const Ternario = function(Condicion,BloqueSi, BloqueSino)
    {
        return{
            Condicion: Condicion,
            BloqueSi: BloqueSi,
            BloqueSino: BloqueSino,
            TipoInstruccion: "ternario"
        }
    }
    function EjecutarTernario(ternario,ent)
    {
        return{
            Ternario:null
        }
    }
    //Switch 
    const Seleccionar = function(Expresion, LCasos, NingunoBloque)
    {
        return  {
            Expresion: Expresion,
            LCasos: LCasos,
            NingunoBloque: NingunoBloque,
            TipoInstruccion: "switch"
        }
    }
    const Caso = function(Expresion,Bloque)
    {
        return {
            Expresion:Expresion,
            Bloque:Bloque
        }
    }
    function EjecutarSeleccionar(seleccionar,ent)
    {
        pilaCiclosSw.push("seleccionar");
		var ejecutado = false; //esta variable hace que se ejecute el DEFAULT;
      	var nuevo = Entorno(ent);
        for(var elemento of seleccionar.LCasos)
        {
            var condicion = Evaluar(NuevaOperacion(seleccionar.Expresion,elemento.Expresion,"=="), ent)
            if(condicion.Tipo=="bool")
            {
              	if(condicion.Valor)//Se le puede poner || ejecutado para que evalue todas las demas expresiones aunque no se cumplan
              	{
                	//ejecutado=true;
                	var res = EjecutarBloque(elemento.Bloque, nuevo)
                	if(res && res.TipoInstruccion=="break")
                	{
                        pilaCiclosSw.pop();
                  		return
                	}
                    else if (res)
                    {
                        pilaCiclosSw.pop();
                        return res
                    }
              	}
            }
          	else
            {
                pilaCiclosSw.pop();
                return
            }
        }
        if(seleccionar.NingunoBloque && !ejecutado)
        {
            EjecutarBloque(seleccionar.NingunoBloque, nuevo)
        }
        pilaCiclosSw.pop();
        return
    }
    // Break
    const Romper = function()
    {
        return{
            TipoInstruccion: "break"
        }
    }
    //Continue
    const Continuar = function()
    {
        return{
            TipoInstruccion: "continue"
        }
    }
    // Return
    const Retorno = function(Expresion)
    {
        return {
            Expresion:Expresion,
        	TipoInstruccion: "return"
        }
    }
    //Mientras
    const Mientras = function(Condicion, Bloque)
    {
        return {
            Condicion: Condicion,
            Bloque: Bloque,
            TipoInstruccion:"while"
        }
    }
    function EjecutarMientras(mientras,ent)
    {
        while(true)
        {
            pilaCiclosSw.push("ciclo"); 
            nuevo = Entorno(ent);
        	var resultadoCondicion = Evaluar(mientras.Condicion, ent)
            if(resultadoCondicion.Tipo=="bool")
            {
            	if(resultadoCondicion.Valor)
            	{
                	var res = EjecutarBloque(mientras.Bloque, nuevo);
                	if(res && res.TipoInstruccion=="break")
                	{
                		break;
                	}
                    if(res && res.TipoInstruccion=="continue")
                    {
                        continue;
                    }
                    else if (res)
                    {
                        pilaCiclosSw.pop();
                        return res
                    }
            	}
            	else
            	{
                	break;
              	}
            }
            else
            {
                errores.push("Se esperaba una condicion dentro del Switch");
                console.log("Se esperaba una condicion dentro del Mientras")
                pilaCiclosSw.pop();
                return
            }
		}
        pilaCiclosSw.pop();
        return
    }
    //Do While
    const HacerMientras = function(Condicion, Bloque)
    {
        return{
            Condicion: Condicion,
            Bloque: Bloque,
            TipoInstruccion: "dowhile"
        }
    }
    function EjecutarHacerMientras(hacer,ent)
    {
        do
        {
            pilaCiclosSw.push("ciclo")
            nuevo = Entorno(ent)
            var res = EjecutarBloque(hacer.Bloque, nuevo);
            if(res && res.TipoInstruccion=="break")
            {
                break;
            }
            if(res && res.TipoInstruccion=="continue")
            {
                var resultadoCondicion = Evaluar(hacer.Condicion, nuevo)
                if(resultadoCondicion.Tipo == "bool")
                {
                    if(!resultadoCondicion.Valor)
                    {   
                        break;
                    }
                }                 
                continue;
            }
            else if (res)
            {
                pilaCiclosSw.pop();
                return res
            }
            var resultadoCondicion = Evaluar(hacer.Condicion, ent)
            if(resultadoCondicion.Tipo == "bool")
            {
                if(!resultadoCondicion.Valor)
                {   
                    break;
                }
            }
            else
            {
                errores.push("Se esperaba una condicion dentro del Do While");
                console.log("Se esperaba una condicion dentro del Do while")
                pilaCiclosSw.pop();
                return
            }
        }while(true);
        pilaCiclosSw.pop();
    }
    //For
    const Desde = function(ExpDesde, ExpHasta, ExpPaso, Bloque, ent)
    {
        return {
            ExpDesde: ExpDesde,
            ExpHasta: ExpHasta,
            ExpPaso: ExpPaso,
            Bloque: Bloque,
            TipoInstruccion:"for"
        }
    }
    const Actualizacion = function(id, Expresion)
    {
        return{
            Id: id,
            Expresion: Expresion
        }
    }
    function EjecutarDesde(Desde, ent)
	{
        pilaCiclosSw.push("ciclo"); 
      	var nuevo = Entorno(ent);
    	//controlador de la condicion
    	if( Desde.ExpDesde.TipoInstruccion == "crear" )
    	{
      		EjecutarCrear(Desde.ExpDesde, nuevo);
    	}
    	else
    	{
        	EjecutarAsignar(Desde.ExpDesde, nuevo);
    	}
        var contador = 0;
    	while(true)
    	{
            var condicion = Evaluar(Desde.ExpHasta, nuevo); //verifica si la condicion se cumple y retorna un bool
      	    //si no se cumple la condicion
            if(!condicion.Valor)
            {
                pilaCiclosSw.pop();
                return;
            }
            var nuevo2 = Entorno(nuevo);
            var res = EjecutarBloque(Desde.Bloque, nuevo2);
            if(res && res.TipoInstruccion=="break")
            {
                break;
            }
            if(res && res.TipoInstruccion=="continue")
            {
                if(Desde.ExpPaso.Expresion.OperandoDer)
                {
                    EjecutarAsignar(Asignar(Desde.ExpPaso.Id,NuevaOperacion(Desde.ExpPaso.Expresion.OperandoIzq,Desde.ExpPaso.Expresion.OperandoDer,Desde.ExpPaso.Expresion.Tipo)), nuevo)                            
                }
                continue;
            }
            else if (res)
            {
                pilaCiclosSw.pop();
                return res
            }
            if(Desde.ExpPaso.Expresion.OperandoDer)
            {
        	    EjecutarAsignar(Asignar(Desde.ExpPaso.Id,NuevaOperacion(Desde.ExpPaso.Expresion.OperandoIzq,Desde.ExpPaso.Expresion.OperandoDer,Desde.ExpPaso.Expresion.Tipo)), nuevo)                            
            }		
    	}
        pilaCiclosSw.pop();
        return;
	}
    //Funciones
    const Funcion=function(Id, Parametros, Tipo, Bloque)
    {
        return{
            Id: Id,
            Parametros: Parametros,
            Bloque: Bloque,
            Tipo: Tipo,
            TipoInstruccion: "funcion"
        }
    }
    function EjecutarFuncion(elemento,ent)
    {
        var nombrefuncion = elemento.Id + "$";
        // for(var Parametro of elemento.Parametros) //Esto permite la sobrecarga de metodos :3
        // {
        //     nombrefuncion+=Parametro.Tipo;
        // }
        if (ent.tablaSimbolos.has(nombrefuncion))//aca se permitiria la sobrecarga 
      	{
            errores.push("La funcion ",elemento.Id," ya ha sido declarada");
            console.log("La funcion ",elemento.Id," ya ha sido declarada");
      		return;
      	}
        ent.tablaSimbolos.set(nombrefuncion, elemento);
    }
    //Llamada
    const Llamada=function(Id,Params)
    {
        return {
            Id: Id,
            Params: Params,
            TipoInstruccion: "llamada"
        }
    }
    function EjecutarLlamada(Llamada,ent)
    {
        var nombrefuncion = Llamada.Id+"$";
        var Resueltos = [];
        for(var param of Llamada.Params)
        {
            var valor = Evaluar(param,ent);
            //nombrefuncion += valor.Tipo;
            Resueltos.push(valor);
        }
        var temp = ent;
        var simboloFuncion = null;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(nombrefuncion))
            {
                // evaluar el resultado de la expresión 
                simboloFuncion = temp.tablaSimbolos.get(nombrefuncion);	
                break;
            }
            temp=temp.anterior;
        }
        if(!simboloFuncion){
            errores.push("No se encontró la funcion \""+Llamada.Id + "\" con esa combinacion de parametros")
            console.log("No se encontró la funcion "+Llamada.Id + " con esa combinacion de parametros")
            return nuevoSimbolo("@error@","error");
        } 
        pilaFunciones.push(Llamada.Id);
        var nuevo = Entorno(EntornoGlobal)
        var index = 0;
        for(var crear of simboloFuncion.Parametros)
        {
            crear.Expresion=Resueltos[index];
            EjecutarCrear(crear,nuevo);
            index++;
        }
        var retorno=nuevoSimbolo("@error@","error");
        var res = EjecutarBloque(simboloFuncion.Bloque, nuevo)
        if(res)
        {
            if(res.Tipo=="void" )
            {
                if(simboloFuncion.Tipo!="void")
                {
                    errores.push("No se esperaba un return")
                    console.log("No se esperaba un retorno");
                    retorno=nuevoSimbolo("@error@","error");
                }
                else
                {
                    retorno=nuevoSimbolo("@vacio@","vacio")
                }
            }
            else
            {
                var exp = Evaluar(res,nuevo);
                if(exp.Tipo!=simboloFuncion.Tipo)
                {
                    errores.push("El tipo del return no coincide");
                    console.log("El tipo del retorno no coincide");
                    retorno=nuevoSimbolo("@error@","error");
                }
                else
                {
                    retorno=exp;
                }
            }
        }
        else
        {
            if(simboloFuncion.Tipo!="void")
            {
                errores.push("Se esperaba un return")
                console.log("Se esperaba un retorno");
                retorno=nuevoSimbolo("@error@","error");
            }
            else
            {
                retorno=nuevoSimbolo("@vacio@","vacio")
            }
        }
        pilaFunciones.pop();
        return retorno;
    }
    //Casteos
    const Casteo = function(Valor, Casteo)
    {
        return{
            Valor: Valor,
            Casteo: Casteo, //cadena
            TipoInstruccion:"casteo"
        }
    }
    function EjecutarCasteo(casteo,ent)
    {
        var aux = Evaluar(casteo.Valor,ent)
        if(casteo.Casteo != "cadena" && casteo.Casteo != "round" && casteo.Casteo != "truncate" && casteo.Casteo != "typeof" && casteo.Casteo != "length")
        {
            switch(aux.Tipo)
            {
                case "numero":
                    switch(casteo.Casteo)
                    {
                        case "numero":
                            return nuevoSimbolo(aux.Valor+"","numero");
                        case "cadena":
                            return nuevoSimbolo(aux.Valor+"","cadena");
                        case "decimal":
                            return nuevoSimbolo(aux.Valor,"decimal");
                        case "char":
                            return nuevoSimbolo(String.fromCharCode(aux.Valor)+"","char")
                        default:
                            errores.push("Tipo de casteo no definida: ", casteo.Casteo)
                            console.log("Tipo de casteo no definida :c");
                            return nuevoSimbolo("@error@","error");
                    }
                case "decimal":
                    switch(casteo.Casteo)
                    {
                        case "numero":
                            return nuevoSimbolo(Math.trunc(aux.Valor),"numero");
                        case "decimal":
                            return nuevoSimbolo(Math.trunc(aux.Valor),"decimal");
                        case "char":
                            return nuevoSimbolo(String.fromCharCode(aux.Valor)+"","char");
                        case "cadena":
                            return nuevoSimbolo(aux.Valor+"","cadena");
                        default:
                            errores.push("Tipo de casteo no definida: ", casteo.Casteo)
                            console.log("Tipo de casteo no definida :c");
                            return nuevoSimbolo("@error@","error");
                    }
                case "char":
                    switch(casteo.Casteo)
                    {
                        case "numero":
                            return nuevoSimbolo(aux.Valor.charCodeAt(0),"numero");
                        case "char":
                            return nuevoSimbolo(aux.Valor.charCodeAt(0),"char");
                        case "decimal":
                            return nuevoSimbolo(aux.Valor.charCodeAt(0),"decimal");
                        default:
                            errores.push("Tipo de casteo no definida: ", casteo.Casteo)
                            console.log("Tipo de casteo no definida :c");
                            return nuevoSimbolo("@error@","error");
                    }

       
                    var temp=ent;
                    var encontrada = false
                    while(temp!=null)
                    {
                        if(temp.tablaSimbolos.has(casteo.Valor.Valor+""))
                        {
                            valorID = temp.tablaSimbolos.get(casteo.Valor.Valor); 
                            var cast = Casteo(valorID, casteo.Casteo)
                            return EjecutarCasteo(cast,ent)
                            
                        }
                        temp=temp.anterior;
                    }
                    if(!encontrada)
                    {
                        console.log("No se encontro la variable a castear");
                        return nuevoSimbolo("@error@","error");
                    }
                
            }
        }
        // Si no es casteo normal, entonces es un toString(), toLower(), toUpper(), truncate(), round(), length() o typeof()
        switch(casteo.Casteo)
        {
            case "cadena": 
                switch(aux.Tipo)
                {
                    case "bool":
                    case "numero":
                    case "decimal":
                    case "cadena":
                    case "char":
                        return nuevoSimbolo(aux.Valor+"","cadena");
                    default:
                        errores.push("Error Semantico: Tipo de casteo no definida: "+ aux.Tipo)
                        console.log("Tipo de casteo no definida F");
                        return nuevoSimbolo("@error@","error");
                }
                break;
            case "lower":
                if(aux.Tipo=="cadena")
                {
                    return nuevoSimbolo(aux.Valor.toLowerCase(),"cadena");
                }
                errores.push("Error semantico: Funcion toLower esperaba un elemento de tipo String")
                console.log("Error semantico en la funcion toLower")
                return nuevoSimbolo("@error","error");
                break;
            case "upper":
                if(aux.Tipo=="cadena")
                {
                    return nuevoSimbolo(aux.Valor.toUpperCase(),"cadena");
                }
                errores.push("Error semantico: Funcion toUpper esperaba un elemento de tipo String")
                console.log("Error semantico en la funcion toUpper")
                return nuevoSimbolo("@error","error");
                break;
            case "truncate":
                if(aux.Tipo=="decimal" || aux.Tipo == "numero")
                {
                    return nuevoSimbolo(Math.trunc(aux.Valor),"numero")
                }
                errores.push("Error semantico: Funcion truncate esperaba un elemento de tipo numerico")
                console.log("Error semantico: Funcion truncate esperaba un elemento de tipo numerico")
                return nuevoSimbolo("@error","error");
                break;
            case "round":
                if(aux.Tipo=="numero" || aux.Tipo=="decimal")
                {
                    return nuevoSimbolo(Math.round(aux.Valor),"numero")
                }
                
                errores.push("Error semantico: Funcion round esperaba un elemento de tipo numerico")
                console.log("Error semantico: Funcion round esperaba un elemento de tipo numerico")
                return nuevoSimbolo("@error","error"); 
                break;
            case "length":
                switch(aux.Tipo)
                {
                    case "cadena":
                        return nuevoSimbolo(aux.Valor.length,"numero")
                        break;
                    default:
                        if(aux.Tipo!="numero" && aux.Tipo!="bool" && aux.Tipo!="decimal" && aux.Tipo!="char")
                        {
                            var temp=ent;
                            var encontrada = false
                            while(temp!=null)
                            {
                                if(temp.tablaSimbolos.has(casteo.Valor.Valor+""))
                                {
                                    valorID = temp.tablaSimbolos.get(casteo.Valor.Valor); 
                                    if(valorID[0].Valor == "lista")
                                    {
                                        return nuevoSimbolo(valorID.length-1,"numero")
                                    }
                                    else
                                    {
                                        return nuevoSimbolo(valorID.length,"numero")
                                    }
                                }
                                temp=temp.anterior;
                            }
                            if(!encontrada)
                            {
                                console.log("No se encontro la variable a castear");
                                return nuevoSimbolo("@error@","error");
                            }
                        }
                        else
                        {
                            errores.push("Error semantico: Funcion length no esperaba el tipo: "+aux.Tipo)
                            console.log("Error semantico: Funcion length no esperaba el tipo: "+aux.Tipo)
                            return nuevoSimbolo("@error@","error");
                        }
                    
                }
                break;
            case "typeof":
                switch(aux.Tipo)
                {
                    case "cadena":
                        return nuevoSimbolo("string","cadena")
                    case "numero":
                        return nuevoSimbolo("int","cadena")
                    case "decimal":
                        return nuevoSimbolo("double","cadena")
                    case "bool":
                        return nuevoSimbolo("boolean","cadena")
                    case "char":
                        return nuevoSimbolo("char","cadena")
                    default:
                        var temp=ent;
                        var encontrada = false
                        while(temp!=null)
                        {
                            if(temp.tablaSimbolos.has(casteo.Valor.Valor+""))
                            {
                                valorID = temp.tablaSimbolos.get(casteo.Valor.Valor); 
                                if(valorID[0].Valor =="lista")
                                {
                                    return nuevoSimbolo("list","cadena")
                                }
                                else
                                {
                                    return nuevoSimbolo("vector","cadena")
                                }
                            }
                            temp=temp.anterior;
                        }
                         if(!encontrada)
                        {
                            errores.push("No se encontro la variable a castear",casteo.Valor.Valor+"")
                            console.log("No se encontro la variable a castear");
                            return nuevoSimbolo("@error@","error");
                        }
                }
        }
        
    } 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return "Rprint";
break;
case 6:return "Rif";
break;
case 7:return "Relse"
break;
case 8:return "Rswitch";
break;
case 9:return "Rcase"
break;
case 10:return "Rdefault"
break;
case 11:return "Rint";
break;
case 12:return "Rdouble";
break;
case 13:return "Rboolean";
break;
case 14:return "Rchar";
break;
case 15:return "Rstring";
break;
case 16:return "Rvoid";
break;
case 17:return "Rretorno";
break;
case 18:return "Rcontinue";
break;
case 19:return "RtoString";
break;
case 20:return "RtoLower";
break;
case 21:return "RtoUpper";
break;
case 22:return "Rround";
break;
case 23:return "Rtruncate"
break;
case 24:return "Rwhile";
break;
case 25:return "Rbreak";
break;
case 26:return "Rfor";
break;
case 27:return "Rnew";
break;
case 28:return "Rlist";
break;
case 29:return "Radd";
break;
case 30:return "Rexec";
break;
case 31:return "Rlength";
break;
case 32:return "Rtypeof";
break;
case 33:return "Rdo";
break;
case 34:return "Rtochar"
break;
case 35:return "PUNTO";
break;
case 36:return 48
break;
case 37:return 11;
break;
case 38:return 40;
break;
case 39:return 8;
break;
case 40:return 10;
break;
case 41:return 28;
break;
case 42:return 29;
break;
case 43:return 31;
break;
case 44:return "LLAVEDER";
break;
case 45:return 83;
break;
case 46:return 84;
break;
case 47:return 74;
break;
case 48:return 75;
break;
case 49:return 73;
break;
case 50:return 72;
break;
case 51:return 27;
break;
case 52:return 44;
break;
case 53:return 45;
break;
case 54:return 68;
break;
case 55:return 69;
break;
case 56:return 71;
break;
case 57:return 70;
break;
case 58:return 47;
break;
case 59:return 36;
break;
case 60:return 35;
break;
case 61:return 76;
break;
case 62:return 77;
break;
case 63:return 78;
break;
case 64:return 26;
break;
case 65:return 82;  
break;
case 66:return 81;  
break;
case 67:cadena="";this.begin("string");
break;
case 68:cadena+=yy_.yytext;
break;
case 69:cadena+="\"";
break;
case 70:cadena+="\n";
break;
case 71:cadena+="\t";
break;
case 72:cadena+="\\";
break;
case 73:cadena+="\'";
break;
case 74:yy_.yytext=cadena; this.popState(); return 79;
break;
case 75: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 76: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 'TEMPLATE'; 
break;
case 77:return 5;
break;
case 78: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:toString\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:truncate\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:exec\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:do\b)/i,/^(?:toCharArray\b)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:`[^\n\`]*`)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}