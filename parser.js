/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,10],$V2=[1,19],$V3=[1,17],$V4=[1,18],$V5=[1,20],$V6=[1,16],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[5,7,16,18,20,22,25,27,28,34,35,39,40,41],$Vb=[1,45],$Vc=[1,41],$Vd=[1,39],$Ve=[1,38],$Vf=[1,40],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,59],$Vk=[1,60],$Vl=[1,61],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[10,11,26,42,43,44,45,46,47,48,49,50,51,52,53,54,55],$Vy=[10,11,26,54,55],$Vz=[1,101],$VA=[10,11,26,42,43,48,49,50,51,52,53,54,55],$VB=[10,11,26,42,43,44,45,47,48,49,50,51,52,53,54,55],$VC=[10,11,26,48,49,50,51,52,53,54,55],$VD=[10,11,26,50,51,54,55],$VE=[5,7,16,18,20,21,22,25,27,28,34,35,39,40,41],$VF=[25,27,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"LINS":4,"EOF":5,"INS":6,"Rprint":7,"PARIZQ":8,"Exp":9,"PARDER":10,"PTCOMA":11,"DECLARAR":12,"ASIGNAR":13,"IF":14,"SWITCH":15,"Rbreak":16,"MIENTRAS":17,"Rwhile":18,"BLOQUE":19,"Rif":20,"Relse":21,"Rswitch":22,"LLAVEIZQ":23,"LCASOS":24,"Rdefault":25,"DPUNTOS":26,"LLAVEDER":27,"Rcase":28,"WHILE":29,"INT":30,"STRING":31,"BOOLEANO":32,"CHAR":33,"Rint":34,"ID":35,"IGUAL":36,"DOUBLE":37,"Rdouble":38,"Rstring":39,"Rboolean":40,"Rchar":41,"MAS":42,"MENOS":43,"POR":44,"DIV":45,"POT":46,"MOD":47,"MENOR":48,"MAYOR":49,"DIFERENTE":50,"IGUALDAD":51,"MAYORI":52,"MENORI":53,"AND":54,"OR":55,"NOT":56,"Cadena":57,"NUMERO":58,"TRUE":59,"FALSE":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Rprint",8:"PARIZQ",10:"PARDER",11:"PTCOMA",16:"Rbreak",18:"Rwhile",20:"Rif",21:"Relse",22:"Rswitch",23:"LLAVEIZQ",25:"Rdefault",26:"DPUNTOS",27:"LLAVEDER",28:"Rcase",34:"Rint",35:"ID",36:"IGUAL",38:"Rdouble",39:"Rstring",40:"Rboolean",41:"Rchar",42:"MAS",43:"MENOS",44:"POR",45:"DIV",46:"POT",47:"MOD",48:"MENOR",49:"MAYOR",50:"DIFERENTE",51:"IGUALDAD",52:"MAYORI",53:"MENORI",54:"AND",55:"OR",56:"NOT",57:"Cadena",58:"NUMERO",59:"TRUE",60:"FALSE"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,5],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[17,5],[14,5],[14,7],[15,10],[15,7],[24,4],[24,5],[29,5],[19,3],[19,2],[12,1],[12,1],[12,1],[12,1],[30,3],[30,5],[37,5],[37,3],[31,5],[31,3],[32,5],[32,3],[33,5],[33,3],[13,4],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
EjecutarBloque($$[$0-1], EntornoGlobal) 
break;
case 2:
console.log("Sintactico","Error en : '"+yytext+"'",this._$.first_line,this._$.first_column)
break;
case 3:
 this.$=$$[$0-1]; this.$.push($$[$0]) 
break;
case 4:
 this.$=[]; this.$.push($$[$0]) 
break;
case 5:
this.$=Imprimir("print",$$[$0-2]);
break;
case 6: case 7: case 8: case 9: case 11: case 22: case 23: case 24: case 25:
this.$ = $$[$0]
break;
case 10:
this.$ = Romper()
break;
case 12:
 this.$ = new Mientras($$[$0-2],$$[$0])
break;
case 13:
this.$ = Si($$[$0-2],$$[$0],null)
break;
case 14:
this.$ = Si($$[$0-4],$$[$0-2],$$[$0])
break;
case 15:
this.$ = Seleccionar($$[$0-7],$$[$0-4],$$[$0-1])
break;
case 16:
this.$ = Seleccionar($$[$0-4],$$[$0-1],null)
break;
case 17:
this.$=[];this.$.push(Caso($$[$0-2],$$[$0]));
break;
case 18:
this.$=$$[$0-4];this.$.push(Caso($$[$0-2],$$[$0]));
break;
case 19:
this.$ = new Mientras($$[$0-2],$$[$0]);
break;
case 20:
this.$ = $$[$0-1]
break;
case 21:
this.$ = []
break;
case 26:
this.$ = Crear($$[$0-1], "int", 0)
break;
case 27:
this.$ = Crear($$[$0-3], "int", $$[$0-1])
break;
case 28:
this.$ = Crear($$[$0-3], "double", $$[$0-1])
break;
case 29:
this.$ = Crear($$[$0-1], "double", 0.0)
break;
case 30:
this.$ = Crear($$[$0-3], "string", $$[$0-1])
break;
case 31:
this.$ = Crear($$[$0-1], "string", "")
break;
case 32:
this.$ = Crear($$[$0-3], "boolean", $$[$0-1])
break;
case 33:
this.$ = Crear($$[$0-1], "boolean", true)
break;
case 34:
this.$ = Crear($$[$0-3], "char", $$[$0-1])
break;
case 35:
this.$ = Crear($$[$0-1], "char", '\u0000')
break;
case 36:
this.$ = Asignar($$[$0-3],$$[$0-1])
break;
case 37:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"+"); 
break;
case 38:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"-"); 
break;
case 39:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"*"); 
break;
case 40:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"/"); 
break;
case 41:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"^"); 
break;
case 42:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"%"); 
break;
case 43:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"<"); 
break;
case 44:
 this.$=NuevaOperacion($$[$0-2],$$[$0],">"); 
break;
case 45:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"!="); 
break;
case 46:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"=="); 
break;
case 47:
 this.$=NuevaOperacion($$[$0-2],$$[$0],">="); 
break;
case 48:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"<="); 
break;
case 49:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"&&"); 
break;
case 50:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"||"); 
break;
case 51:
 this.$=NuevaOperacionUnario($$[$0],"!"); 
break;
case 52:
 this.$=NuevaOperacionUnario($$[$0],"umenos"); 
break;
case 53:
 this.$=nuevoSimbolo($$[$0],"cadena"); 
break;
case 54:
 this.$=nuevoSimbolo($$[$0],"ID");
break;
case 55:
this.$=nuevoSimbolo(parseFloat($$[$0]),"numero"); 
break;
case 56:
 this.$=nuevoSimbolo(true,"bool"); 
break;
case 57:
 this.$=nuevoSimbolo(false,"bool"); 
break;
case 58:
 this.$=$$[$0-1] 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:$V2,20:$V3,22:$V4,30:12,31:13,32:14,33:15,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9},{1:[3]},{5:[1,24],6:25,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:$V2,20:$V3,22:$V4,30:12,31:13,32:14,33:15,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9},{5:[1,26]},o($Va,[2,4]),{8:[1,27]},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),{11:[1,28]},o($Va,[2,11]),o($Va,[2,22]),o($Va,[2,23]),o($Va,[2,24]),o($Va,[2,25]),{36:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},{35:[1,33]},{35:[1,34]},{35:[1,35]},{35:[1,36]},{1:[2,1]},o($Va,[2,3]),{1:[2,2]},{8:$Vb,9:37,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Va,[2,10]),{8:$Vb,9:46,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:47,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:48,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:49,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{11:[1,50],36:[1,51]},{11:[1,53],36:[1,52]},{11:[1,55],36:[1,54]},{11:[1,57],36:[1,56]},{10:[1,58],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{8:$Vb,9:73,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:74,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),o($Vx,[2,56]),o($Vx,[2,57]),{8:$Vb,9:75,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{11:[1,76],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{10:[1,77],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{10:[1,78],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{10:[1,79],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($Va,[2,26]),{8:$Vb,9:80,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:81,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Va,[2,31]),{8:$Vb,9:82,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Va,[2,33]),{8:$Vb,9:83,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Va,[2,35]),{11:[1,84]},{8:$Vb,9:85,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:86,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:87,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:88,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:89,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:90,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:91,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:92,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:93,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:94,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:95,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:96,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:97,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{8:$Vb,9:98,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Vy,[2,51],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($Vx,[2,52]),{10:[1,99],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($Va,[2,36]),{19:100,23:$Vz},{23:[1,102]},{19:103,23:$Vz},{11:[1,104],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{11:[1,105],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{11:[1,106],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{11:[1,107],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($Va,[2,5]),o($VA,[2,37],{44:$Vl,45:$Vm,46:$Vn,47:$Vo}),o($VA,[2,38],{44:$Vl,45:$Vm,46:$Vn,47:$Vo}),o($VB,[2,39],{46:$Vn}),o($VB,[2,40],{46:$Vn}),o($Vx,[2,41]),o($VB,[2,42],{46:$Vn}),o($VC,[2,43],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo}),o($VC,[2,44],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo}),o($VD,[2,45],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,52:$Vt,53:$Vu}),o($VD,[2,46],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,52:$Vt,53:$Vu}),o($VC,[2,47],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo}),o($VC,[2,48],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo}),o($Vy,[2,49],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o([10,11,26,55],[2,50],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv}),o($Vx,[2,58]),o($Va,[2,13],{21:[1,108]}),{4:109,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:$V2,20:$V3,22:$V4,27:[1,110],30:12,31:13,32:14,33:15,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9},{24:111,28:[1,112]},o($Va,[2,12]),o($Va,[2,27]),o($Va,[2,30]),o($Va,[2,32]),o($Va,[2,34]),{19:113,23:$Vz},{6:25,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:$V2,20:$V3,22:$V4,27:[1,114],30:12,31:13,32:14,33:15,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9},o($VE,[2,21]),{25:[1,115],27:[1,116],28:[1,117]},{8:$Vb,9:118,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},o($Va,[2,14]),o($VE,[2,20]),{26:[1,119]},o($Va,[2,16]),{8:$Vb,9:120,35:$Vc,43:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh,60:$Vi},{26:[1,121],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{4:122,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:$V2,20:$V3,22:$V4,30:12,31:13,32:14,33:15,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9},{26:[1,123],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{4:124,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:$V2,20:$V3,22:$V4,30:12,31:13,32:14,33:15,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9},{6:25,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:$V2,20:$V3,22:$V4,27:[1,125],30:12,31:13,32:14,33:15,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9},{4:126,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:$V2,20:$V3,22:$V4,30:12,31:13,32:14,33:15,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9},o($VF,[2,17],{12:6,13:7,14:8,15:9,17:11,30:12,31:13,32:14,33:15,6:25,7:$V0,16:$V1,18:$V2,20:$V3,22:$V4,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9}),o($Va,[2,15]),o($VF,[2,18],{12:6,13:7,14:8,15:9,17:11,30:12,31:13,32:14,33:15,6:25,7:$V0,16:$V1,18:$V2,20:$V3,22:$V4,34:$V5,35:$V6,39:$V7,40:$V8,41:$V9})],
defaultActions: {24:[2,1],26:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var pilaCiclosSw = [];
    var pilaFunciones = [];
  	// entorno
  	const Entorno = function(anterior)
    {
    	return {
        	tablaSimbolos:new Map(),
          	anterior:anterior
        }
    }
  	var EntornoGlobal = Entorno(null)
  	//Ejecuciones
    function EjecutarBloque(LINS, ent)
	{
        var retorno=null;
        for(var elemento of LINS)
        {
        	switch(elemento.TipoInstruccion)
          	{
            	case "print":
                    var res=Evaluar(elemento.Operacion, ent);
                    console.log(res.Valor);
                    break;
                case "crear":
                    retorno = EjecutarCrear(elemento, ent);
                    break;
                case "asignar":
                    retorno = EjecutarAsignar(elemento, ent);
                    break;
                case "if":
                    retorno = EjecutarSi(elemento, ent);
                    break;
                case "while":
                    retorno = EjecutarMientras(elemento, ent);
                    break;
                case "switch":
                    retorno = EjecutarSeleccionar(elemento, ent);
                    break;
                case "return":
                    if (pilaFunciones.length>0)
                    {
                        retorno = elemento.Expresion;
                    }
                    else
                    {
                        console.log("Intruccion retorno fuera de una funcion")
                    }
                    break;
                case "break":
                    if (pilaCiclosSw.length>0)
                    {
                        return elemento;
                    }
                    else
                    {
                        console.log("Intruccion romper fuera de un seleccionar o un ciclo")
                    }
                    
          	}
            if(retorno)
            {
                return retorno;
            }
        }
        return null;
    }
    //Expresion
    function nuevoSimbolo(Valor,Tipo){
        return {
            Valor:Valor,
            Tipo:Tipo
        }
    }
    const NuevaOperacion= function(OperandoIzq,OperandoDer,Tipo)
    {
        return {
            OperandoIzq:OperandoIzq,
            OperandoDer:OperandoDer,
            Tipo:Tipo
        }
    }

    function Evaluar(Operacion,ent)
    {
        var Valorizq=null;
        var Valorder=null;
      	//Simbolos
        switch(Operacion.Tipo)
        {
            case "bool":
                return nuevoSimbolo(Operacion.Valor,Operacion.Tipo);
            case "cadena":
                return nuevoSimbolo(Operacion.Valor,Operacion.Tipo);
            case "numero":
                return nuevoSimbolo(parseFloat(Operacion.Valor),Operacion.Tipo);
          	case "ID":
                var temp=ent;
                while(temp!=null)
                {
                    if(temp.tablaSimbolos.has(Operacion.Valor))
                    {
                        var valorID = temp.tablaSimbolos.get(Operacion.Valor);
                        return nuevoSimbolo(valorID.Valor,valorID.Tipo);
                    }
                    temp=temp.anterior;
                }
                console.log("No existe la variable " + Operacion.Valor);
                return nuevoSimbolo("@error@","error");
            case "funcion":
                var res = EjecutarLlamada(Llamada(Operacion.Valor.Id,Operacion.Valor.Params), ent)
                return res
        }
      	//Operaciones
        Valorizq=Evaluar(Operacion.OperandoIzq, ent);
        if(Operacion.OperandoDer!=null)
        {
            Valorder=Evaluar(Operacion.OperandoDer, ent);
        }
      	var tipoRetorno = "error";
      	// identificar qué operaciones sí podemos realizar dependiendo del tipo
    	switch(Valorizq.Tipo)
        {
          case "cadena":
            // cadena puede sumarse con cualquier otro tipo
            if(!Valorder){
            	tipoRetorno="cadena";
            	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
              	case "numero":
                case "bool":
                	tipoRetorno = "cadena";	
                	break;
            }
            break;
          case "numero":
            if(!Valorder){
            	tipoRetorno="numero";
              	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
                	tipoRetorno = "cadena";
                	break;
              	case "numero":
                	tipoRetorno = "numero";	
                	break;
            }
            break;
          case "bool":
            if(!Valorder){
            	tipoRetorno="bool";
              	break;
            }
            if(!Valorder){
            	break;
            }
            switch(Valorder.Tipo)
            {
            	case "bool":
                	tipoRetorno = "bool";
              		break;
            }
            break;
        }
      
        switch (Operacion.Tipo)
        {
            case "+":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "numero":
            			return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                		break;
                }
            case "-":
                switch(tipoRetorno)
                {
                	case "numero":
            			return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                		break;
                }
            case "umenos":
                switch(tipoRetorno)
                {
                	case "numero":
            			return nuevoSimbolo(0-Valorizq.Valor, tipoRetorno);
                }
            case "*":
                switch(tipoRetorno)
                {
                	case "numero":
                    	return nuevoSimbolo(Valorizq.Valor * Valorder.Valor, tipoRetorno);
                }
            case "/":
                switch(tipoRetorno)
                {
                	case "numero":	
                    	return nuevoSimbolo(Valorizq.Valor / Valorder.Valor, tipoRetorno);
                }
            case "%":
                switch(tipoRetorno)
                {
                	case "numero":
            			return nuevoSimbolo(Valorizq.Valor % Valorder.Valor, tipoRetorno);
                }
            case "^":
                switch(tipoRetorno)
                {
                	case "numero":
            			return nuevoSimbolo(Math.pow(Valorizq.Valor,Valorder.Valor), tipoRetorno);
                }
            case "!":
                switch(tipoRetorno)
                {
                	case "bool":
            			return nuevoSimbolo(!Valorizq.Valor, tipoRetorno);
                }
            case "&&":
                switch(tipoRetorno)
                {
                	case "bool":
            			return nuevoSimbolo(Valorizq.Valor && Valorder.Valor, tipoRetorno);
                }
            case "||":
                switch(tipoRetorno)
                {
                	case "bool":
                		return nuevoSimbolo(Valorizq.Valor || Valorder.Valor, tipoRetorno);
                }
            case ">":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "numero":
                	case "bool":
                    	return nuevoSimbolo(Valorizq.Valor > Valorder.Valor, "bool");
                }
            case "<":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "numero":
                	case "bool":
                    	return nuevoSimbolo(Valorizq.Valor < Valorder.Valor, "bool");
                }
            case ">=":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "numero":
                	case "bool":
                    	return nuevoSimbolo(Valorizq.Valor >= Valorder.Valor, "bool");
                }
            case "<=":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "numero":
                	case "bool":
                    	return nuevoSimbolo(Valorizq.Valor <= Valorder.Valor, "bool");
                }
            case "==":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "numero":
                	case "bool":
                    	return nuevoSimbolo(Valorizq.Valor == Valorder.Valor, "bool");
                }
            case "!=":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "numero":
                	case "bool":
                		return nuevoSimbolo(Valorizq.Valor != Valorder.Valor, "bool");
                }
        }
      	console.log(
          "Tipos incompatibles " + ( Valorizq ? Valorizq.Tipo : "" ) + 
          " y " + ( Valorder ? Valorder.Tipo : "" )); 
      	return nuevoSimbolo("@error@", "error");
    }

    function NuevaOperacionUnario(Operando,Tipo)
    {
        return {
            OperandoIzq:Operando,
            OperandoDer:null,
            Tipo:Tipo
        }
    }
    //Imprimir
    const Imprimir=function(TipoInstruccion,Operacion){
        return {
            TipoInstruccion:TipoInstruccion,
            Operacion:Operacion
        }
    }
    //Crear
    const Crear = function(id, tipo, expresion){
        return {
            Id: id,
            Tipo: tipo,
            Expresion: expresion,
            TipoInstruccion: "crear"
        }
    }
    function EjecutarCrear(crear,ent)
    {
        if(ent.tablaSimbolos.has(crear.Id)) //Validar si existe la variable
        {
            console.log("La variable ",crear.Id," ya ha sido declarada en este ambito");
      		return;     //Aca se regresa el valor :3
        }
        var valor;
        if (crear && crear.Expresion)
        {
            valor = Evaluar(crear.Expresion);
        }
        else
        {
            switch(crear.Tipo)
            {
                case "int":
                    valor = nuevoSimbolo(0,"int");
                    break;
                case "double":
                    valor = nuevoSimbolo(0.0,"double");
                    break;
                case "boolean":
                    valor = nuevoSimbolo(true,"boolean");
                case "char":
                    valor = nuevoSimbolo('\u0000',"char");
                case "string":
                    valor = nuevoSimbolo("","cadena");
            }
        }
        //Crear objeto a insertar
        ent.tablaSimbolos.set(crear.Id, valor);
    }
    //Asignar
    const Asignar = function(id,Expresion){
        return{
            Id: id,
            Expresion: Expresion,
            TipoInstruccion: "asignar"
        }
    }

    function EjecutarAsignar (asignar,ent) 
	{
      	//Evaluar la expresion
      	var valor = Evaluar(asignar.Expresion,ent);
        // validar si existe la variable
      	temp=ent;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(asignar.Id))
            {
                // evaluar el resultado de la expresión 
                var simbolotabla = temp.tablaSimbolos.get(asignar.Id);	
              	
                // comparar los tipos
                if (simbolotabla.Tipo === valor.Tipo)
                {
                	// reasignar el valor
                    temp.tablaSimbolos.set(asignar.Id, valor);
                    return
                }
                else
                {
                    console.log("Tipos incompatibles ",simbolotabla.Tipo," , ",valor.Tipo)
                    return
                }
            }
            temp=temp.anterior;
        }
        console.log("No se encontro la variable ",asignar.Id);
    }

    //If
    const Si=function(Condicion,BloqueSi,BloqueElse)
    {
          return {
            Condicion:Condicion,
            BloqueSi:BloqueSi,
            BloqueElse:BloqueElse,
            TipoInstruccion:"if"
          }
    }

    function EjecutarSi (si,ent)
    {
    	var res = Evaluar(si.Condicion, ent);
        if(res.Tipo=="bool")
        {
        	if(res.Valor)
          	{
      	        var nuevosi=Entorno(ent);
            	return EjecutarBloque(si.BloqueSi, nuevosi);
          	}
          	else if(si.BloqueElse!=null)
          	{
      	        var nuevosino=Entorno(ent);
            	return EjecutarBloque(si.BloqueElse, nuevosino);
        	}
    	}
        else
        {
            console.log("Se esperaba una condicion dentro del If");
        }
    }
    //Switch 
    const Seleccionar = function(Expresion, LCasos, NingunoBloque)
    {
        return  {
            Expresion: Expresion,
            LCasos: LCasos,
            NingunoBloque: NingunoBloque,
            TipoInstruccion: "switch"
        }
    }
    const Caso = function(Expresion,Bloque)
    {
        return {
            Expresion:Expresion,
            Bloque:Bloque
        }
    }
    function EjecutarSeleccionar(seleccionar,ent){
        pilaCiclosSw.push("seleccionar");
		var ejecutado = false;  
      	var nuevo = Entorno(ent);
        for(var elemento of seleccionar.LCasos)
        {
            var condicion=Evaluar(NuevaOperacion(seleccionar.Expresion,elemento.Expresion,"=="), ent)
            if(condicion.Tipo=="bool")
            {
              	if(condicion.Valor || ejecutado)
              	{
                	ejecutado=true;
                	var res = EjecutarBloque(elemento.Bloque, nuevo)
                	if(res && res.TipoInstruccion=="romper")
                	{
                        pilaCiclosSw.pop();
                  		return
                	}
                    else if (res)
                    {
                        pilaCiclosSw.pop();
                        return res
                    }
              	}
            }
          	else
            {
                pilaCiclosSw.pop();
                return
            }
        }
        if(seleccionar.NingunoBloque && !ejecutado)
        {
            EjecutarBloque(seleccionar.NingunoBloque, nuevo)
        }
        pilaCiclosSw.pop();
        return
    }

    // Break
    const Romper = function(){
        return{
            TipoInstruccion: "break"
        }
    }
    const Retorno = function(Expresion)
    {
        return {
            Expresion:Expresion,
        	TipoInstruccion: "return"
        }
    }

    //Mientras
    const Mientras = function(Condicion, Bloque){
        return{
            Condicion: Condicion,
            Bloque: BloqueNinguno,
            TipoInstruccion: "while"
        }
    }

    function EjecutarMientras(mientras,ent){
        pilaCiclosSw.push("ciclo");        
      	nuevo=Entorno(ent);
        while(true)
        {
        	var resultadoCondicion = Evaluar(mientras.Condicion, ent)
            if(resultadoCondicion.Tipo=="bool")
            {
            	if(resultadoCondicion.Valor)
            	{
                	var res=EjecutarBloque(mientras.Bloque, nuevo);
                	if(res && res.TipoInstruccion=="romper")
                	{
                		break;
                	}
                    else if (res)
                    {
                        pilaCiclosSw.pop();
                        return res
                    }
            	}
            	else
            	{
                	break;
              	}
            }
            else
            {
                console.log("Se esperaba una condicion dentro del Mientras")
                pilaCiclosSw.pop();
                return
            }
		}
        pilaCiclosSw.pop();
        return
    }
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "Rprint";
break;
case 5:return "Rif";
break;
case 6:return "Relse"
break;
case 7:return "Rswitch";
break;
case 8:return "Rcase"
break;
case 9:return "Rdefault"
break;
case 10:return "Rint";
break;
case 11:return "Rdouble";
break;
case 12:return "Rboolean";
break;
case 13:return "Rchar";
break;
case 14:return "Rstring";
break;
case 15:return "Rwhile";
break;
case 16:return "Rbreak";
break;
case 17:return "Rfor";
break;
case 18:return 26
break;
case 19:return 11;
break;
case 20:return 8;
break;
case 21:return 10;
break;
case 22:return 23;
break;
case 23:return "LLAVEDER";
break;
case 24:return 59;
break;
case 25:return 60;
break;
case 26:return 52;
break;
case 27:return 53;
break;
case 28:return 51;
break;
case 29:return 50;
break;
case 30:return 36;
break;
case 31:return 42;
break;
case 32:return 43;
break;
case 33:return 44;
break;
case 34:return 45;
break;
case 35:return 47;
break;
case 36:return 49;
break;
case 37:return 48;
break;
case 38:return 54;
break;
case 39:return 55;
break;
case 40:return 56;
break;
case 41:return 35
break;
case 42:return 58;  
break;
case 43: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 57; 
break;
case 44: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 57; 
break;
case 45: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 'TEMPLATE'; 
break;
case 46:return 5;
break;
case 47: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:`[^\n\`]*`)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}